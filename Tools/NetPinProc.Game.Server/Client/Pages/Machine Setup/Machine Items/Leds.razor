@page "/machine/items/leds"
@using NetPinProc.Game.Manager.Client.Shared.DialogComponents;
@using NetPinProc.Game.Manager.Client.Shared.HelpComponents
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Leds | @Names.SITE_NAME</PageTitle>

<MudDataGrid T="LedConfigFileEntry"
             MultiSelection="false"
             Class="netpinprocdatagrid"
             Items="@Elements"
             SortMode="SortMode.Multiple"
             Dense=true
             FixedHeader=true
             Height="668px"
             Filterable="true"
             QuickFilter="@_quickFilter"
             Hideable="true"
             Bordered=true
             ReadOnly=false
             EditDialogOptions="new DialogOptions{ FullWidth = true, MaxWidth = MaxWidth.Medium}"
             EditMode=DataGridEditMode.Form
             EditTrigger="DataGridEditTrigger.OnRowClick"
             StartedEditingItem="@StartedEditingItem"
             CanceledEditingItem="@CanceledEditingItem"
             CommittedItemChanges="@CommittedItemChanges">
    <ToolBarContent>
        <MudText Typo="Typo.h6">LEDS</MudText>
        <MudText Class="pl-2" Typo="Typo.caption">
            Use this page to add, edit and remove LEDS for PD-LED boards. Hover over the column headers for help and click rows to edit leds.
        </MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Quick filter Led Name, Num, Tags" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        @*<SelectColumn T="LedConfigFileEntry" />*@
        <TemplateColumn Sortable="false" Filterable="false">
            <CellTemplate>
                <MudToolBar Dense Class="netpinproctoolbar">
                    <MudIconButton Size="Size.Small" Variant="Variant.Filled"
                                   Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                   OnClick="@(_ => ShowDeleteDialog(context.Item.Number))" />
                </MudToolBar>
            </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.Number" ShowFilterIcon="false">
            <HeaderTemplate>
                <MudTooltip Text="RGB Leds should be written like `A0-R0-G1-B1`. TODO: test single color leds">Number</MudTooltip>
            </HeaderTemplate>
            <EditTemplate>
                <MudTextField @bind-Value=@context.Item.Number Label="Number"
                              Variant="Variant.Outlined" Margin="Margin.Dense"
                                        Required RequiredError="This machine item needs a number to apply config to the PROC" />
            </EditTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Name" SortBy="@_sortBy" />

            <PropertyColumn Property="x => x.Tags" SortBy="@_sortBy">

            <HeaderTemplate>
                <MudTooltip>
                    <TooltipContent><LedsTagsHelp /></TooltipContent>
                    <ChildContent>Tags</ChildContent>
                </MudTooltip>
            </HeaderTemplate>
            <EditTemplate>
                <MudTextField @bind-Value=@context.Item.Tags Label="Tags"
                              Variant="Variant.Outlined" Margin="Margin.Dense"
                              Required=false />
            </EditTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Polarity" SortBy="@_sortBy" />

            <PropertyColumn Property="x => x.Conn" ShowFilterIcon="false">
            <HeaderTemplate>
                <MudTooltip>
                    <TooltipContent><ConnectionHelp /></TooltipContent>
                    <ChildContent>Conn</ChildContent>
                </MudTooltip>
            </HeaderTemplate>
            <EditTemplate>
                <MudTextField @bind-Value=@context.Item.Conn Label="Conn"
                              Variant="Variant.Outlined" Margin="Margin.Dense"
                              Required=false />
            </EditTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Bus" SortBy="@_sortBy" />

            <PropertyColumn Property="x => x.Location" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
            <HeaderTemplate>
                <MudTooltip>
                    <TooltipContent>Location string name. Could be a location like cabinet, playfield, under playfield, apron, etc...</TooltipContent>
                    <ChildContent>Location</ChildContent>
                </MudTooltip>
            </HeaderTemplate>
            <EditTemplate>
                <MudTextField @bind-Value=@context.Item.Location Label="Location"
                              Variant="Variant.Outlined" Margin="Margin.Dense"
                              Required=false />
            </EditTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.XPos" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
            <EditTemplate>
                <MudNumericField @bind-Value=context.Item.XPos Variant="Variant.Outlined"
                                 Label="XPos" Min="0.00" Max="3600.00" T="double?" />
            </EditTemplate>
            <HeaderTemplate>
                <MudTooltip>
                    <TooltipContent><MachineItemPositionHelp /></TooltipContent>
                    <ChildContent>XPos</ChildContent>
                </MudTooltip>
            </HeaderTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.YPos" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
            <EditTemplate>
                <MudNumericField @bind-Value=context.Item.YPos Variant="Variant.Outlined"
                                 Label="YPos" Min="0.00" Max="3600.00" T="double?" />
            </EditTemplate>
            <HeaderTemplate>
                <MudTooltip>
                    <TooltipContent><MachineItemPositionHelp /></TooltipContent>
                    <ChildContent>YPos</ChildContent>
                </MudTooltip>
            </HeaderTemplate>
            </PropertyColumn>
        </Columns>
        @*    <PagerContent>
    <MudDataGridPager T="LedConfigFileEntry" />
    </PagerContent>*@
        </MudDataGrid>

        <MudStack Row>
    <MudSpacer />
    <MudButton Variant="Variant.Filled" Color="Color.Error"
               Size="Size.Small"
               Class="mt-2"
               OnClick="@ShowAddDialog">ADD LED</MudButton>
</MudStack>

@code {
    private IEnumerable<LedConfigFileEntry> Elements = new List<LedConfigFileEntry>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<LedConfigFileEntry, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<LedConfigFileEntry, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Number.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Tags.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync() => await RefreshViewDataAsync();

    async Task RefreshViewDataAsync() =>
        Elements = await Http.GetFromJsonAsync<List<LedConfigFileEntry>>("/api/leds");

    // events
    void StartedEditingItem(LedConfigFileEntry item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(LedConfigFileEntry item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async Task CommittedItemChanges(LedConfigFileEntry item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");

        var response = await Http.PutAsJsonAsync("api/leds", item);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("failed to update led", Severity.Error);
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync<bool>();
            if (result)
                Snackbar.Add("led updated", Severity.Success);
            else
                Snackbar.Add("failed to update led", Severity.Warning);
        }
    }

    async Task ShowDeleteDialog(string ledName)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning: Deleting LED: " + ledName,
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel", options: new DialogOptions { MaxWidth = MaxWidth.Small });
        if (result.HasValue && result.Value)
        {
            try
            {
                var response = await Http.DeleteAsync("api/leds/" + ledName);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add($"led: {ledName} deleted", Severity.Success);
                    await RefreshViewDataAsync();
                }
                else
                {
                    Snackbar.Add(await response.Content.ReadAsStringAsync(), Severity.Error);
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    async Task ShowAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddLedDialog>();
        var result = await dialog.Result;
        if (!result.Canceled)
            await RefreshViewDataAsync();
    }
}