@page "/machine/items/leds"
@using NetPinProc.Game.Manager.Client.Pages.Machine_Setup.MachineItems;
@using NetPinProc.Game.Manager.Client.Shared.DialogComponents;
@using NetPinProc.Game.Manager.Client.Shared.HelpComponents
@inherits ConfigFileEntryBaseComponentBase<LedConfigFileEntry>

<PageTitle>Leds | @Names.SITE_NAME</PageTitle>


<MudStack>
    <MudStack Row>
        <MudButton Variant="Variant.Filled" Color="Color.Error"
                   Size="Size.Small"
                   Class="mt-2"
                   OnClick="@ShowAddDialog">ADD LED</MudButton>
        <MudSpacer />        
    </MudStack>


    <MudDataGrid T="LedConfigFileEntry"
                 MultiSelection="false"
                 Class="netpinprocdatagrid"
                 Items="@Elements"
                 SortMode="SortMode.Multiple"
                 Dense=true
                 FixedHeader=true
                 Height="668px"
                 Filterable="true"
                 QuickFilter="@_quickFilter"
                 Hideable="true"
                 Bordered=true
                 ReadOnly=false
                 EditDialogOptions="new DialogOptions{ FullWidth = true, MaxWidth = MaxWidth.Medium}"
                 EditMode=DataGridEditMode.Form
                 EditTrigger="DataGridEditTrigger.OnRowClick"
                 StartedEditingItem="@StartedEditingItem"
                 CanceledEditingItem="@CanceledEditingItem"
                 CommittedItemChanges="@CommittedItemChanges">
        <ToolBarContent>
            <MudText Typo="Typo.h6">LEDS</MudText>
            <MudText Class="pl-2" Typo="Typo.caption">
                @lang.Keys["Pages:Summary", new { Item = "leds"}]
            </MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Quick filter Led Name, Num, Tags" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            @*<SelectColumn T="LedConfigFileEntry" />*@
            <TemplateColumn Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudToolBar Dense Class="netpinproctoolbar">
                        <MudIconButton Size="Size.Small" Variant="Variant.Filled"
                                       Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                       OnClick="@(_ => ShowDeleteDialog(context.Item.Number))" />
                    </MudToolBar>
                </CellTemplate>
                </TemplateColumn>

                <PropertyColumn Property="x => x.Number" ShowFilterIcon="false">
                <HeaderTemplate>
                    <MudTooltip Text="@lang["MachineItem:LedNum"]">Number</MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudTextField @bind-Value=@context.Item.Number Label="Number"
                                  Variant="Variant.Outlined" Margin="Margin.Dense"
                                  Required RequiredError="@lang["MachineItem:RequiredNum"]" />
                </EditTemplate>
                </PropertyColumn>

                <PropertyColumn Property="x => x.Name" SortBy="@_sortBy" />

                <PropertyColumn Property="x => x.NumberPROC" />

            <PropertyColumn Property="x => x.ItemType" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
                <HeaderTemplate>
                    <MudTooltip>
                        <TooltipContent>
                            <MudStack>
                                <MudText Typo="Typo.caption" Color="Color.Warning" Align="Align.Left">
                                    @lang.Keys["MachineItem:ItemType"]
                                </MudText>
                                <MudText Typo="Typo.caption" Color="Color.Warning" Align="Align.Left">
                                    @lang.Keys["SwitchItemTypes:Flipper"]
                                </MudText>
                                <MudText Typo="Typo.caption" Color="Color.Warning" Align="Align.Left">
                                    @lang.Keys["SwitchItemTypes:Bumper"]
                                </MudText>
                            </MudStack>
                        </TooltipContent>
                        <ChildContent>Item Type</ChildContent>
                    </MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudTextField @bind-Value=@context.Item.ItemType Label="ItemType"
                                  Variant="Variant.Outlined" Margin="Margin.Dense"
                                  Required=false />
                </EditTemplate>
            </PropertyColumn>

                <PropertyColumn Property="x => x.Tags" SortBy="@_sortBy">

                <HeaderTemplate>
                    <MudTooltip>
                        <TooltipContent><LedsTagsHelp /></TooltipContent>
                        <ChildContent>Tags</ChildContent>
                    </MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudTextField @bind-Value=@context.Item.Tags Label="Tags"
                                  Variant="Variant.Outlined" Margin="Margin.Dense"
                                  Required=false />
                </EditTemplate>
                </PropertyColumn>

                <PropertyColumn Property="x => x.Polarity" SortBy="@_sortBy" />

                <PropertyColumn Property="x => x.Conn" ShowFilterIcon="false">
                <HeaderTemplate>
                    <MudTooltip>
                        <TooltipContent>
                            @lang.Keys["MachineItem:Connection"]
                        </TooltipContent>
                        <ChildContent>Conn</ChildContent>
                    </MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudTextField @bind-Value=@context.Item.Conn Label="Conn"
                                  Variant="Variant.Outlined" Margin="Margin.Dense"
                                  Required=false />
                </EditTemplate>
                </PropertyColumn>

                <PropertyColumn Property="x => x.Bus">
                <HeaderTemplate>
                    <MudTooltip>
                        <TooltipContent>Unused?</TooltipContent>
                        <ChildContent>Bus</ChildContent>
                    </MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudTextField @bind-Value=@context.Item.Bus Label="Bus"
                                  Variant="Variant.Outlined" Margin="Margin.Dense"
                                  Required=false />
                </EditTemplate>
                </PropertyColumn>

            <PropertyColumn Property="x => x.SingleColor" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
                <HeaderTemplate>
                    <MudTooltip>
                        <TooltipContent>
                            <MudStack>
                                <MudText Typo="Typo.caption" Color="Color.Warning" Align="Align.Left">
                                    @lang.Keys["MachineItem:SingleColor"]
                                </MudText>
                            </MudStack>
                        </TooltipContent>
                        <ChildContent>SingleColor</ChildContent>
                    </MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudCheckBox T="bool?" @bind-Value=@context.Item.SingleColor Label="SingleColor"
                                 Dense
                                 Required=false />
                </EditTemplate>
            </PropertyColumn>

                <PropertyColumn Property="x => x.Location" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
                <HeaderTemplate>
                    <MudTooltip>
                        <TooltipContent>
                            @lang.Keys["MachineItem:Location"]
                        </TooltipContent>
                        <ChildContent>Location</ChildContent>
                    </MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudTextField @bind-Value=@context.Item.Location Label="Location"
                                  Variant="Variant.Outlined" Margin="Margin.Dense"
                                  Required=false />
                </EditTemplate>
                </PropertyColumn>

                <PropertyColumn Property="x => x.XPos" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
                <HeaderTemplate>
                    <MudTooltip>
                        <TooltipContent><MachineItemPositionHelp /></TooltipContent>
                        <ChildContent>XPos</ChildContent>
                    </MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudNumericField @bind-Value=context.Item.XPos Variant="Variant.Outlined"
                                     Label="XPos" Min="0.00" Max="3600.00" T="double?" />
                </EditTemplate>
                </PropertyColumn>

                <PropertyColumn Property="x => x.YPos" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
                <HeaderTemplate>
                    <MudTooltip>
                        <TooltipContent><MachineItemPositionHelp /></TooltipContent>
                        <ChildContent>YPos</ChildContent>
                    </MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudNumericField @bind-Value=context.Item.YPos Variant="Variant.Outlined"
                                     Label="YPos" Min="0.00" Max="3600.00" T="double?" />
                </EditTemplate>                
                </PropertyColumn>
            <PropertyColumn Property="x => x.ZRot" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
                <HeaderTemplate>
                    <MudTooltip>
                        <TooltipContent><MachineItemPositionHelp /></TooltipContent>
                        <ChildContent>ZRot</ChildContent>
                    </MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudNumericField @bind-Value=context.Item.ZRot Variant="Variant.Outlined"
                                     Label="ZRot" Min="0.00" Max="360.00" T="double?" Required="false" />
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.ObjName" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
                <HeaderTemplate>
                    <MudTooltip>
                        <TooltipContent><MachineItemPositionHelp /></TooltipContent>
                        <ChildContent>ObjName</ChildContent>
                    </MudTooltip>
                </HeaderTemplate>
                <EditTemplate>
                    <MudTextField @bind-Value=context.Item.ObjName Variant="Variant.Outlined"
                                     Label="ObjName" Required="false" />
                </EditTemplate>
            </PropertyColumn>
            </Columns>
            @*    <PagerContent>
        <MudDataGridPager T="LedConfigFileEntry" />
        </PagerContent>*@
            </MudDataGrid>
</MudStack>

@code {
    private IEnumerable<LedConfigFileEntry> Elements = new List<LedConfigFileEntry>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();

    protected override void OnInitialized() { ApiUrl = ApiUrl; }

    // custom sort by name length
    private Func<LedConfigFileEntry, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<LedConfigFileEntry, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Number.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Tags?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync() 
    {
        ApiUrl = "api/leds/";
        await RefreshViewDataAsync();
    }

    async Task RefreshViewDataAsync() =>
        Elements = await Http.GetFromJsonAsync<List<LedConfigFileEntry>>(ApiUrl);

    async Task ShowDeleteDialog(string ledName)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning: Deleting: " + ledName,
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel", options: new DialogOptions { MaxWidth = MaxWidth.Small });
        if (result.HasValue && result.Value)
        {
            try
            {
                var response = await Http.DeleteAsync(ApiUrl + ledName);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add($"{ledName} deleted", Severity.Success);
                    await RefreshViewDataAsync();
                }
                else
                {
                    Snackbar.Add(await response.Content.ReadAsStringAsync(), Severity.Error);
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    async Task ShowAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddLedDialog>();
        var result = await dialog.Result;
        if (!result.Canceled)
            await RefreshViewDataAsync();
    }
}