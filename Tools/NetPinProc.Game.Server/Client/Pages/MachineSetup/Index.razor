@page "/machine/setup"
@using BlazorDownloadFile;
@using NetPinProc.Game.Manager.Client.Pages.MachineSetup.MachineItems
@using System.Text
@inject NavigationManager Nav
@inject ISnackbar Snack
@inject IDialogService DialogService

<PageTitle>Machine Setup | @Names.SITE_NAME</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid Spacing="-20">

        <MudItem xs="12" Class="mb-0">
            <MudToolBar Dense Class="mb-0 mud-theme-primary">
                <MudText>EXPORT & TEST: </MudText>
                <MudTooltip Text="@lang["MachineTools:ExportMachineJson"]">
                    <MudIconButton Color="Color.Secondary"
                                   Class="mud-theme-success mt-1 mr-1"
                            OnClick="@ExportJsonAsync"
                            Icon="@Icons.Material.Filled.ImportExport"
                            Size="Size.Small" />
                </MudTooltip>                
                <MudTooltip Text="@lang["MachineTools:ImportMachineJson"]">
                    <MudFileUpload T="IBrowserFile" Accept=".json,.yaml,.yml"
                                   FilesChanged="ImportJsonAsync"
                                   MaximumFileCount="1">
                        <ActivatorContent>
                            <MudIconButton Color="Color.Info"
                                           Class="mud-theme-info mt-1 mr-1"
                                           Icon="@Icons.Material.Filled.ImportExport"
                                           Size="Size.Small" />                            
                        </ActivatorContent>
                    </MudFileUpload>
                </MudTooltip>
                <MudTooltip Text="@lang["MachineTools:CheckCompatible"]">
                    <MudIconButton Color="Color.Secondary"
                                   Class="mud-theme-warning mt-1 mr-1"
                                   OnClick="@TestMachineConfig"
                                   Icon="@Icons.Material.Filled.AcUnit"
                                   Size="Size.Small" />
                </MudTooltip>
            </MudToolBar>
            </MudItem>

            <MudItem xs="12">
            <MudTabs Outlined="true" Position="Position.Start" Rounded="true" Border="true"
                     MinimumTabWidth="20px"
                     ApplyEffectsToContainer="true" Class="mt-0" PanelClass="pa-1">

                <MudTabPanel Icon="@Icons.Material.Filled.SwitchAccessShortcut">
                    <Switches />
                </MudTabPanel>

                <MudTabPanel Icon="@Icons.Material.Filled.DriveEta">
                    <Drivers />
                </MudTabPanel>

                <MudTabPanel Icon="@Icons.Material.Filled.Lightbulb" ToolTip="Lamps">
                    <Lamps />
                </MudTabPanel>

                <MudTabPanel Icon="@Icons.Material.Filled.LightMode" ToolTip="GI">
                    <GI />
                </MudTabPanel>

                <MudTabPanel Icon="@Icons.Material.Filled.LightbulbCircle" ToolTip="LEDS">
                    <Leds />
                </MudTabPanel>

                <MudTabPanel Icon="@Icons.Material.Filled.Security">
                    <Servos />
                </MudTabPanel>

                <MudTabPanel Icon="@Icons.Material.Filled.DoNotStep">
                    <Steppers />
                </MudTabPanel>
            </MudTabs>
            </MudItem>            
    </MudGrid>
</MudContainer>



@code 
{
    [Inject] HttpClient? Http { get; set; }

    [Inject] IBlazorDownloadFileService? BlazorDownloadFileService { get; set; }

    [Inject] ILanguageContainerService? lang { get; set; }

    async Task ExportJsonAsync()
    {
        try
        {
            var json = await Http.GetStringAsync("api/machine/ExportToJson");

            await BlazorDownloadFileService
                .DownloadFile("machine.json",
                    Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(json)),
                    "application/json");
        }
        catch (Exception ex) { Snack.Add(ex.Message, Severity.Warning); }
    }

    async Task ImportJsonAsync(IBrowserFile file)
    {
        try
        {
            bool? result = await DialogService.ShowMessageBox(
                "Warning: Overwrite Machine Config",
                @"You can back up the database, close the server and copy the database files before running this.
It is wrapped in a transaction so if it does fail at any point importing changes will be rolled back",
                yesText: "Overwrite!", cancelText: "Cancel",
                options: new DialogOptions { MaxWidth = MaxWidth.Small });    

            if (result.HasValue && result.Value)
            {
                using var fs = file.OpenReadStream(512000 * 10);
                using var ms = new MemoryStream();
                await fs.CopyToAsync(ms);
                ms.Position = 0;
                var json = Encoding.UTF8.GetString(ms.ToArray());

                HttpResponseMessage? response;
                if (file.Name.Contains("json"))
                    response = await Http.PostAsJsonAsync("api/machine/ImportMachineJson", json);
                else
                    response = await Http.PostAsJsonAsync("api/machine/ImportMachineYaml", json);
                
                if (response.IsSuccessStatusCode)
                {
                    Snack.Add("Machine updated", Severity.Success);
                }
                else
                {
                    Snack.Add(await response.Content.ReadAsStringAsync(), Severity.Error);
                }
            }            
        }
        catch (Exception ex) { Snack.Add(ex.Message, Severity.Warning); }
    }


    async Task TestMachineConfig()
    {
        try
        {
            var res = await Http.GetAsync("api/machine/IsCompatible");
            if(res.IsSuccessStatusCode)
                Snack.Add($"PROC machine setup passed", Severity.Success);
            else
                Snack.Add($"{await res.Content.ReadAsStringAsync()}", Severity.Warning);
            
        }
        catch (Exception ex) 
        { 
            Snack.Add($"{ex.InnerException?.Message}", Severity.Warning);
        }
    }

    
}