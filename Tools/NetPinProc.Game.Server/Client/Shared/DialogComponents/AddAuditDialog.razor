@using NetPinProc.Domain.Data;
@using NetPinProc.Domain.Enums;
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>Add a new audit</TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

                        <MudTextField T="string" @bind-Value=Audit.Id Label="Id" Required="true" RequiredError="An ID is required" 
                            Variant="Variant.Outlined"/>

                        <MudTextField T="string" @bind-Value=Audit.Name Label="Name" Required="true" RequiredError="A name is required"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="string" @bind-Value=Audit.Description Lines="2" Label="Description" Required="false"
                                      Variant="Variant.Outlined" />

                        <MudTextField T="int" @bind-Value=Audit.Value Label="Value" Required="true"
                                      Variant="Variant.Outlined" />

                        <MudSelect T="AuditType" @bind-Value=Audit.Type
                            Variant="Variant.Outlined" Required RequiredError="The options for this audit needs a type">
                            @foreach (AuditType item in Enum.GetValues(typeof(AuditType)))
                            {
                                <MudSelectItem Value="@item">@item.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudForm>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="pa-4 mt-4">
                    <MudStack Row>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled=!success DropShadow="false" OnClick="@SubmitAsync">Add</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@Cancel">Cancel</MudButton>
                    </MudStack>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>
@code
{
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    public Audit Audit { get; set; } = new();

    bool success;
    string[] errors = { };
    MudForm? form;

    private async Task SubmitAsync()
    {
        try
        {
            var reponse = await Http.PostAsJsonAsync("api/audits", Audit);

            if (reponse.IsSuccessStatusCode)
            {
                Snackbar.Add($"Added New Audit: {Audit.Id}:{Audit.Name}", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add(await reponse.Content.ReadAsStringAsync(), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}