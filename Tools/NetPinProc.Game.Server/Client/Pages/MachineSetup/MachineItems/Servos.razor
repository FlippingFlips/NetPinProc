@page "/machine/items/servos"
@using NetPinProc.Game.Manager.Client.Pages.Machine_Setup.MachineItems;
@using NetPinProc.Game.Manager.Client.Shared.DialogComponents;
@using NetPinProc.Game.Manager.Client.Shared.HelpComponents
@inherits ConfigFileEntryBaseComponentBase<ServoConfigFileEntry>

<PageTitle>Servos | @Names.SITE_NAME</PageTitle>

<MudStack>
    <MudStack Row>    
    <MudButton Variant="Variant.Filled" Color="Color.Error"
               Size="Size.Small"
               Class="mt-2"
               OnClick="@ShowAddDialog">ADD Servo</MudButton>
        <MudSpacer />
</MudStack>

<MudDataGrid T="ServoConfigFileEntry" MultiSelection="true"
             Class="netpinprocdatagrid"
             Items="@Elements" SortMode="SortMode.Multiple"
             Dense=true
             FixedHeader=true
             Height="668px"
             Filterable="true"
             QuickFilter="@_quickFilter"
             Hideable="true"
             Bordered=true
             ReadOnly=false
             EditTrigger="DataGridEditTrigger.OnRowClick"
             StartedEditingItem="@StartedEditingItem"
             CanceledEditingItem="@CanceledEditingItem"
             CommittedItemChanges="@CommittedItemChanges">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Servos</MudText>
        <MudText Class="pl-2" Typo="Typo.caption">
            @lang.Keys["Pages:Summary", new { Item = "servos"}]
        </MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Quick filter Servo Name, Num, Tags"
                      Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <Columns>
        @*<SelectColumn T="ServoConfigFileEntry" />*@
        <TemplateColumn Sortable="false" Filterable="false">
            <CellTemplate>
                <MudToolBar Dense Class="netpinproctoolbar">
                    <MudIconButton Size="Size.Small" Variant="Variant.Filled"
                                   Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                   OnClick="@(_ => ShowDeleteDialog(context.Item.Name))" />
                </MudToolBar>
            </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.BoardId" Title="BoardId" Sortable="false" Filterable="false" />

            <PropertyColumn Property="x => x.Name" SortBy="@_sortBy" />

            <PropertyColumn Property="x => x.DisplayName" />

            <PropertyColumn Property="x => x.MinValue" />

            <PropertyColumn Property="x => x.IsEnabled" />

            <PropertyColumn Property="x => x.Index" />

            <PropertyColumn Property="x => x.ItemType" />

            <PropertyColumn Property="x => x.Voltage" />

            <PropertyColumn Property="x => x.Conn" ShowFilterIcon="false">
            <HeaderTemplate>
                <MudTooltip>
                        <TooltipContent>@lang["MachineItem:Connection"]</TooltipContent>
                    <ChildContent>Conn</ChildContent>
                </MudTooltip>
            </HeaderTemplate>
            <EditTemplate>
                <MudTextField @bind-Value=@context.Item.Conn Label="Conn"
                              Variant="Variant.Outlined" Margin="Margin.Dense"
                              Required=false />
            </EditTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Location" Filterable=true ShowFilterIcon="false" Resizable="true" Sortable="true">
            <HeaderTemplate>
                <MudTooltip>
                    <TooltipContent>Location string name. Could be a location like cabinet, playfield, under playfield, apron, etc...</TooltipContent>
                    <ChildContent>Location</ChildContent>
                </MudTooltip>
            </HeaderTemplate>
            <EditTemplate>
                <MudTextField @bind-Value=@context.Item.Location Label="Location"
                              Variant="Variant.Outlined" Margin="Margin.Dense"
                              Required=false />
            </EditTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.XPos">
            <EditTemplate>
                <MudNumericField @bind-Value=context.Item.XPos Variant="Variant.Outlined"
                                 Label="XPos" Min="0.00" Max="3600.00" T="double?" />
            </EditTemplate>
            <HeaderTemplate>
                <MudTooltip>
                    <TooltipContent><MachineItemPositionHelp /></TooltipContent>
                    <ChildContent>X</ChildContent>
                </MudTooltip>
            </HeaderTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.YPos">
            <EditTemplate>
                <MudNumericField @bind-Value=context.Item.YPos Variant="Variant.Outlined"
                                 Label="YPos" Min="0.00" Max="3600.00" T="double?" />
            </EditTemplate>
            <HeaderTemplate>
                <MudTooltip>
                    <TooltipContent><MachineItemPositionHelp /></TooltipContent>
                    <ChildContent>Y</ChildContent>
                </MudTooltip>
            </HeaderTemplate>
            </PropertyColumn>
        </Columns>
        </MudDataGrid>        
</MudStack>

@code {
    private IEnumerable<ServoConfigFileEntry> Elements = new List<ServoConfigFileEntry>();
    private string? _searchString;
    private bool _sortNameByLength;

    // custom sort by name length
    private Func<ServoConfigFileEntry, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<ServoConfigFileEntry, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        ApiUrl = "api/servos/";
        await RefreshViewDataAsync();
    }

    protected async Task RefreshViewDataAsync()
    {
        try { Elements = await Http.GetFromJsonAsync<List<ServoConfigFileEntry>>(ApiUrl); }
        catch (Exception) { }
    }

    async Task ShowDeleteDialog(string ServoName)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning: Deleting: " + ServoName,
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel", options: new DialogOptions { MaxWidth = MaxWidth.Small });
        if (result.HasValue && result.Value)
        {
            try
            {
                var response = await Http.DeleteAsync(ApiUrl + ServoName);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add($"{ServoName} deleted", Severity.Success);
                    await RefreshViewDataAsync();
                }
                else
                {
                    Snackbar.Add(await response.Content.ReadAsStringAsync(), Severity.Error);
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    async Task ShowAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddServoDialog>();
        var result = await dialog.Result;
        if (!result.Canceled)
            await RefreshViewDataAsync();
    }
}