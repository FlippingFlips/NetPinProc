@using NetPinProc.Game.Manager.Shared.Tools.Playfield
@using System.Text;
@inject ILanguageContainerService lang
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large">

    <MudPaper Outlined Square=false>

    <h3>@lang["Playfield:ImportSvgTitle"]</h3>

    <MudGrid Spacing="0">

        <MudItem xs="12">
            <MudPaper Class="mt-2 mb-2">
                <MudText Typo="Typo.caption">@((MarkupString)lang["Playfield:ImportSvg"])</MudText>                    
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
                <MudFileUpload Class="mb-3" T="IBrowserFile" FilesChanged="UploadFiles" Accept="@mimeType">
                    <ActivatorContent>
                        <MudPaper Outlined="true" Class="mt-1">
                            <MudStack Row StretchItems="StretchItems.None">
                            <MudFab Color="Color.Success"
                                    StartIcon="@Icons.Material.Filled.Draw" IconSize="Size.Small" />
                            <MudText Typo="Typo.caption"></MudText>
                        </MudStack>
                        </MudPaper>
                    </ActivatorContent>
                    </MudFileUpload>
        </MudItem>

        <MudItem sm=4 xs="12">
            <div>
                @if (!string.IsNullOrEmpty(imgData))
                {
                    <MudImage Fluid="true" Src="@imgData" Width="300" Elevation="12" />
                }
            </div>
        </MudItem>
    </MudGrid>
</MudPaper>

</MudContainer>

@code {
    const string mimeType = "image/svg+xml";

    string? _fileName;

    string? imgData;

    string? machineItemList;

    List<MachineList<SvgElement>>? SvgGroupLayers;

    private async Task UploadFiles(IBrowserFile file)
    {
        _fileName = string.Empty;
        imgData = null;
        try
        {
            using (var stream = file.OpenReadStream())
            {
                byte[] fileBytes = new byte[stream.Length];
                await stream.ReadAsync(fileBytes, 0, fileBytes.Length);

                // For text files, convert the byte array to a string
                string xml = Encoding.UTF8.GetString(fileBytes);

                await Http.PostAsJsonAsync("api/tools/ExtractFromSvg", xml);

                //extract svg elements
                //SvgGroupLayers = InkscapeMachineItemPositionExtractor.ExtractPositionsFromXml(xml);

                //create image preview
                imgData = $"data:{mimeType};base64,{Convert.ToBase64String(fileBytes)}";
            }

            //set name to show the UI
            _fileName = file.Name;

            Snackbar.Add("Machine items updated!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }
}

<style>
    .pre-wrap {
        white-space: pre-wrap;
    }
</style>